apiVersion: container.cnrm.cloud.google.com/v1beta1
kind: ContainerCluster
metadata:
  labels:
    availability: medium
    target-audience: production
  name: ${CLUSTER_NAME}
  namespace: ${NAMESPACE}
  annotations:
    cnrm.cloud.google.com/remove-default-node-pool: "false"  
spec:
  description: Dev Zonal Cluster.
  location: ${LOCATION}
  initialNodeCount: 1
  workloadIdentityConfig:
    # Workload Identity supports only a single namespace based on your project name.
    # Replace ${PROJECT_ID?} below with your project ID.
    identityNamespace: ${PROJECT_ID}.svc.id.goog
  maintenancePolicy:
    dailyMaintenanceWindow:
      startTime: 01:00
  notificationConfig:
    pubsub:
      enabled: true
      topicRef:
        name: ${CLUSTER_NAME}-pubsub
  networkingMode: VPC_NATIVE
  networkRef:
    name: ${CLUSTER_NAME}-net
  subnetworkRef:
    name: ${CLUSTER_NAME}-subnet
  ipAllocationPolicy:
    servicesSecondaryRangeName: servicesrange
    clusterSecondaryRangeName: clusterrange
  privateClusterConfig:
    enablePrivateEndpoint: false
    enablePrivateNodes: true
    masterIpv4CidrBlock: 172.16.0.0/28
  masterAuthorizedNetworksConfig:
    cidrBlocks:
    - cidrBlock: 0.0.0.0/0
      displayName: private-net
  enableBinaryAuthorization: true
  enableIntranodeVisibility: true
  enableShieldedNodes: true
  addonsConfig:
    networkPolicyConfig:
      disabled: false
    dnsCacheConfig:
      enabled: true
    configConnectorConfig:
      enabled: false
  networkPolicy:
    enabled: true
  podSecurityPolicyConfig:
    enabled: false
  verticalPodAutoscaling:
    enabled: true 
---
apiVersion: container.cnrm.cloud.google.com/v1beta1
kind: ContainerNodePool
metadata:
  labels:
    cluster: ${CLUSTER_NAME}
  name: ${CLUSTER_NAME}-worker-pool-1
  namespace: ${NAMESPACE}
spec:
  location: ${LOCATION}
  initialNodeCount: 2
  autoscaling:
    minNodeCount: 1
    maxNodeCount: 3
  nodeConfig:
    imageType: COS_CONTAINERD
    machineType: e2-standard-4
    diskSizeGb: 100
    diskType: pd-standard 
    tags:
      - kcc
      - dev
    preemptible: false
    oauthScopes:
      - "https://www.googleapis.com/auth/logging.write"
      - "https://www.googleapis.com/auth/monitoring"
    metadata:
      disable-legacy-endpoints: "true"
  management:
    autoRepair: true
    autoUpgrade: true
  clusterRef:
    name: ${CLUSTER_NAME}    
---
apiVersion: pubsub.cnrm.cloud.google.com/v1beta1
kind: PubSubTopic
metadata:
  name: ${CLUSTER_NAME}-pubsub
  namespace: ${NAMESPACE}
---
apiVersion: gkehub.cnrm.cloud.google.com/v1beta1
kind: GKEHubMembership
metadata:
  labels:
    label-one: value-one
  name: ${CLUSTER_NAME}-cluster
  namespace: ${NAMESPACE}
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}  
spec:
  location: global
  description: ${CLUSTER_NAME}
  endpoint:
    gkeCluster:
      resourceRef:
        external: https://container.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/clusters/${CLUSTER_NAME}
---
apiVersion: gkehub.cnrm.cloud.google.com/v1beta1
kind: GKEHubFeature
metadata:
  name: gkehubfeature-acm
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}  
  labels:
    feature: acm
  namespace: ${NAMESPACE}
spec:
  location: global
  projectRef:
    external: ${PROJECT_ID}
  # The resourceID must be "configmanagement" if you want to use Anthos config
  # management feature.
  resourceID: configmanagement
---
apiVersion: gkehub.cnrm.cloud.google.com/v1beta1
kind: GKEHubFeatureMembership
metadata:
  name: gkehub-${CLUSTER_NAME}
  namespace: ${NAMESPACE}  
spec:
  projectRef:
    external: ${PROJECT_ID} 
  location: global
  membershipRef:
    name: ${CLUSTER_NAME}-cluster
  featureRef:
    name: gkehubfeature-acm
  configmanagement:
    version: 1.8.1
    configSync:
      sourceFormat: hierarchy
      git:
        syncRepo: ${REPO}
        syncBranch: ${BRANCH}
        policyDir: ""
        syncWaitSecs: "20"
        syncRev: "HEAD"
        secretType: "none"
    policyController:
      enabled: true
      exemptableNamespaces:
        - "config-management-system"
      referentialRulesEnabled: true
      logDeniesEnabled: true
      templateLibraryInstalled: true
      auditIntervalSeconds: "20"
    binauthz:
      enabled: true
---        
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
    cnrm.cloud.google.com/disable-dependent-services: "false"
  name: gkehubfeature-dep-acmfeature-1
  namespace: ${NAMESPACE}  
spec:
  resourceID: gkehub.googleapis.com
---
apiVersion: serviceusage.cnrm.cloud.google.com/v1beta1
kind: Service
metadata:
  annotations:
    cnrm.cloud.google.com/project-id: ${PROJECT_ID}
    cnrm.cloud.google.com/disable-dependent-services: "false"
  name: gkehubfeature-dep-acmfeature-2
  namespace: ${NAMESPACE}  
spec:
  resourceID: anthosconfigmanagement.googleapis.com
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeNetwork
metadata:
  name: ${CLUSTER_NAME}-net
  namespace: ${NAMESPACE}
spec:
  routingMode: REGIONAL
  autoCreateSubnetworks: false
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeSubnetwork
metadata:
  name: ${CLUSTER_NAME}-subnet
  namespace: ${NAMESPACE}
spec:
  ipCidrRange: 10.2.0.0/16
  region: ${REGION}
  networkRef:
    name: ${CLUSTER_NAME}-net
  secondaryIpRange:
  - rangeName: servicesrange
    ipCidrRange: 10.3.0.0/16
  - rangeName: clusterrange
    ipCidrRange: 10.4.0.0/16  
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeRouter
metadata:
  name: computerouternat-dep-forallsubnets
  namespace: ${NAMESPACE}
spec:
  description: example router description
  region: ${REGION}
  networkRef:
    name: ${CLUSTER_NAME}-net
---
apiVersion: compute.cnrm.cloud.google.com/v1beta1
kind: ComputeRouterNAT
metadata:
  name: computerouternat-sample-forallsubnets
  namespace: ${NAMESPACE}
spec:
  region: ${REGION}
  routerRef:
    name: computerouternat-dep-forallsubnets
  natIpAllocateOption: AUTO_ONLY
  sourceSubnetworkIpRangesToNat: ALL_SUBNETWORKS_ALL_IP_RANGES